version: 2.1

description: >
  An orb for interacting with Singularity containers

# EXAMPLES ####################################################################
examples:

  install_alpine_docker_3:
    description: |
      Install Singularity 3.* on the an alpine Docker base (comes with goLang)
      This combination will build quickly (we use an alpine base that comes with
      GoLang) but is more limited in functionality due to being in a container.

    usage:
      version: 2.1

      orbs:
        singularity: singularity/singularity@1.0.0

      workflows:
        install_alpine_docker_3_example:
          jobs:
            - singularity/install_alpine_docker_3:
                singularity-version: 3.2.1


  install_debian_2:
    description: |
      Install Singularity 2.* on a debian base. We don't need GoLang for
      Singularity under 2.6.1, so this install is not as complicated. We
      can easily install on the debian machine without a Docker container.

    usage:
      version: 2.1

      orbs:
        singularity: singularity/singularity@1.0.0

      workflows:
        install_debian_2_example:
          jobs:
            - singularity/install_debian_2:
                singularity-version: 2.6.1


  install_debian_3:
    description: |
      Install Singularity 3.* on a debian base. We must first install GoLang.
      This is slower than using a pre-built container base, but gives us a native
      install with more functionality.

    usage:
      version: 2.1

      orbs:
        singularity: singularity/singularity@1.0.0

      workflows:
        install_debian_3_example:
          jobs:
            - singularity/install_debian_3:
                go-version: 1.11.5
                singularity-version: 3.2.1


  docker_cli:
    description: |
       Interact with Singularity via a Docker container. The containers are
       prebuilt, so this step supports any of the tags belonging to the
       singularityware/singularity Docker repository. The first job should
       set the machine exceutor to the container, and you can continue with
       steps after that.

    usage:
      version: 2.1

      orbs:
        singularity: singularity/singularity@1.0.0

      workflows:
        docker_cli_example:
          jobs:
            - singularity/docker_cli:
                singularity-version: 3.2.1-slim


  build_container_docker_base:
    description: |
        Build a Singularity Container using a a pre-build Docker base. This is
        the fastest build option because the container is prebuilt, but functionality
        (interaction with the container) after is limited for the same reason.
        This job supports any version of Singularity, and the version maps
        to the tag of singularityware/singularity on Docker Hub.

    usage:
      version: 2.1

      orbs:
        singularity: singularity/singularity@1.0.0

      workflows:
        build_container_docker_base_example:
          jobs:
            - singularity/build_container_docker_base:
                from-uri: docker://busybox
                image: busybox.sif


  build_container_docker_custom_3:
    description: |
        Build a Singularity Container using an alpine Docker base, and install
        a custom version of GoLang and Singularity in the 3.* family.

    usage:
      version: 2.1

      orbs:
        singularity: singularity/singularity@1.0.0

      workflows:
        build_container_docker_custom_3_example:
          jobs:
            - singularity/build_container_docker_custom_3:
                singularity-version: 3.2.1
                go-version: 1.11.5
                from-uri: docker://busybox
                image: busybox.sif


  build_container_custom_2:
    description: |
        Build a Singularity 2.* Container on a debian (machine) base. This means
        that we install Singularity from source

    usage:
      version: 2.1

      orbs:
        singularity: singularity/singularity@1.0.0

      workflows:
        build_container_custom_2_example:
          jobs:
            - singularity/build_container_custom_2:
                singularity-version: 2.6.1
                from-uri: docker://busybox
                image: busybox.sif


  build_container_custom_3:
    description: |
      Build a Singularity Container version 3.* base on a debian base. This
      option will give you the most freedom to use the container after building.

    usage:
      version: 2.1

      orbs:
        singularity: singularity/singularity@1.0.0

      workflows:
        build_container_custom_3_example:
          jobs:
            - singularity/build_container_custom_3:
                go-version: 1.11.5
                singularity-version: 3.2.1
                from-uri: docker://busybox
                image: busybox.sif


# EXECUTORS ####################################################################
# These are executors, the backend bases to run on

executors:
  machine:
    description: >
      A debian-based machine executor.
    machine: true
  alpine-docker:
    description: >
      An alpine, go-lang base image that can have a custom Singularity install
    docker:
      - image: iron/go:dev
  docker:
    description: >
      Pre-build Docker container base to interact with Singularity
    parameters:
      singularity-version:
        type: string
        default: "3.2.1-slim"
    docker:
      - image: singularityware/singularity:<< parameters.singularity-version >>

# COMMANDS ####################################################################
# These are commands that can be given as steps to jobs
commands:

  install-go:
    description: |
      Install GoLang to /tmp
    parameters:
      go-version:
        type: string
        default: "1.11.5"
    steps:
      - run:
          name: Install GoLang
          command: |
            if [ ! -f "/usr/local/bin/singularity" ]; then
                if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
                if ! type "sudo" > /dev/null; then export SUDO=""; fi
                cd /tmp
                wget https://dl.google.com/go/go<< parameters.go-version >>.linux-amd64.tar.gz
                tar -xzf go<< parameters.go-version >>.linux-amd64.tar.gz
                export PATH=/tmp/go/bin:$PATH
                    $SUDO mkdir -p /go
                    $SUDO chmod -R 7777 /go
                which go
                export GOPATH=/go
            fi

  debian-install-3:
    description: Install Singularity 3.* on Debian
    parameters:
      singularity-version:
        type: string
        default: "3.2.1"
    steps:
      - restore_cache:
          keys: v7-dependencies-<< parameters.singularity-version >>
      - run:
          name: install Singularity 3.*
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            $SUDO apt-get install -y build-essential \
                                     squashfs-tools \
                                     libtool \
                                     uuid-dev \
                                     libssl-dev \
                                     libgpgme11-dev \
                                     libseccomp-dev \
                                     pkg-config

            if [ ! -f "/usr/local/bin/singularity" ]; then
                export GOPATH=/go
                export PATH=/tmp/go/bin:$PATH
                go get -u github.com/golang/dep/cmd/dep && \
                mkdir -p ${GOPATH}/src/github.com/sylabs && \
                cd ${GOPATH}/src/github.com/sylabs && \
                wget https://github.com/sylabs/singularity/releases/download/v<< parameters.singularity-version >>/singularity-<< parameters.singularity-version >>.tar.gz && \
                tar -xzvf singularity-<< parameters.singularity-version >>.tar.gz && \
                cd singularity && \
                ./mconfig -p /usr/local && \
                make -C builddir && \
                $SUDO make -C builddir install
            fi

      - save_cache:
          paths:
            - /usr/local/bin/singularity
            - /usr/local/bin/run-singularity
            - /usr/local/etc/singularity
            - /usr/local/lib/singularity
            - /usr/local/libexec/singularity
            - /usr/local/include/singularity
            - /usr/local/var/singularity
          key: v7-dependencies-<< parameters.singularity-version >>


  alpine-install-3:
    description: |
      Install a custom version of Singularity with apk
    parameters:
      singularity-version:
        type: string
        default: "3.2.1"
    steps:
      - run:
         name: Prepare extraction folders
         command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            if ! type "sudo" > /dev/null; then export SUDO=""; fi
            $SUDO chmod -R 777 /usr/local
            $SUDO mkdir -p /usr/local/etc/singularity
            $SUDO mkdir -p /usr/local/lib/singularity
            $SUDO mkdir -p /usr/local/libexec/singularity
            $SUDO mkdir -p /usr/local/include/singularity
            $SUDO mkdir -p /usr/local/var/singularity

      - restore_cache:
          keys: v7-dependencies-<< parameters.singularity-version >>
      - run:
          name: Install Singularity (Version 3.* and up) in the Docker container
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            apk update && \
            apk add --virtual automake build-base linux-headers libffi-dev
            apk add --no-cache bash git openssh gcc squashfs-tools sudo libtool gawk
            apk add --no-cache linux-headers build-base openssl-dev util-linux util-linux-dev
            export GOPATH=/go

            if [ ! -f "/usr/local/bin/singularity" ]; then
                mkdir -p ${GOPATH}/src/github.com/sylabs
                cd ${GOPATH}/src/github.com/sylabs
                wget https://github.com/sylabs/singularity/releases/download/v<< parameters.singularity-version >>/singularity-<< parameters.singularity-version >>.tar.gz
                tar -xzvf singularity-<< parameters.singularity-version >>.tar.gz
                cd singularity && ./mconfig -p /usr/local && make -C builddir && $SUDO make -C builddir install
            fi
            $SUDO chmod -R 777 /usr/local

      - save_cache:
          paths:
            - /usr/local/bin/singularity
            - /usr/local/bin/run-singularity
            - /usr/local/etc/singularity
            - /usr/local/lib/singularity
            - /usr/local/libexec/singularity
            - /usr/local/include/singularity
            - /usr/local/var/singularity
          key: v7-dependencies-<< parameters.singularity-version >>

  debian-install-2:
    description: Install Singularity Versions 2.* on a debian base
    parameters:
      singularity-version:
        type: string
        default: "2.6.1"
    steps:
      - run:
         name: Prepare extraction folders
         command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            if ! type "sudo" > /dev/null; then export SUDO=""; fi
            $SUDO chmod -R 777 /usr/local
            $SUDO mkdir -p /usr/local/etc/singularity
            $SUDO mkdir -p /usr/local/lib/singularity
            $SUDO mkdir -p /usr/local/libexec/singularity
            $SUDO mkdir -p /usr/local/include/singularity
            $SUDO mkdir -p /usr/local/var/singularity
      - restore_cache:
          keys: v7-dependencies-<< parameters.singularity-version >>
      - run:
          name: Install Singularity (pre GoLang)
          command: |
            # The trick below is taken from circleci/gcp-cli, thanks!
            if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
            $SUDO apt-get update && $SUDO apt-get -y install git \
                   build-essential \
                   libtool \
                   squashfs-tools \
                   autotools-dev \
                   libarchive-dev \
                   automake \
                   autoconf \
                   debootstrap \
                   yum \
                   uuid-dev \
                   libssl-dev \
                   python3-dev

            if [ ! -f "/usr/local/bin/singularity" ]; then
                wget https://github.com/sylabs/singularity/releases/download/<< parameters.singularity-version >>/singularity-<< parameters.singularity-version >>.tar.gz
                tar -xzvf singularity-<< parameters.singularity-version >>.tar.gz
                cd singularity-<< parameters.singularity-version >> && ./autogen.sh && ./configure --prefix="${SINGULARITY_PREFIX}" && make && $SUDO make install
            fi
            $SUDO chmod -R 777 /usr/local

      - save_cache:
          paths:
            - /usr/local
          key: v7-dependencies-<< parameters.singularity-version >>

  build-image:
    description: Build a Singularity container using default (not Docker)
    parameters:
      from-uri:
        description: The Singularity recipe path or docker:// uri to build from.
        type: string
        default: Singularity
      image:
        description: The image binary to build (e.g., container.sif)
        type: string
        default: container.sif
    steps:
      - run:
          name: Build Singularity Container
          command: |
              if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
              $SUDO singularity build <<parameters.image>> <<parameters.from-uri>>

  build-image-docker:
    description: Build a Singularity container using Docker
    parameters:
      singularity-version:
        type: string
        default: "v3.2.1-slim"
      from-uri:
        description: The Singularity recipe path or docker:// uri to build from.
        type: string
        default: Singularity
      image:
        description: The image binary to build (e.g., container.sif)
        type: string
        default: container.sif
    steps:
      - run:
          name: Build Singularity Container
          command: |
              singularity build <<parameters.image>> <<parameters.from-uri>>

# JOBS #########################################################################
# Jobs are combined sets of commands for the user to easily run

jobs:

  install_alpine_docker_3:
    description: |
      Install Singularity 3.* on the an alpine Docker base (comes with goLang)
      This combination will build quickly (we use an alpine base that comes with
      GoLang) but is more limited in functionality due to being in a container.
    executor: alpine-docker
    parameters:
      singularity-version:
        type: string
        default: "3.2.1"
    steps:
      - alpine-install-3:
          singularity-version: <<parameters.singularity-version>>
      - run:
          name: Check install version
          command: |
            source "$BASH_ENV"
            singularity --version

  install_debian_2:
    description: |
      Install Singularity 2.* on a debian base. We don't need GoLang for
      Singularity under 2.6.1, so this install is not as complicated. We
      can easily install on the debian machine without a Docker container.
    executor: machine
    parameters:
      singularity-version:
        type: string
        default: "2.6.1"
    steps:
      - debian-install-2:
          singularity-version: <<parameters.singularity-version>>
      - run:
          name: Check install version
          command: |
            if [[ -f "$BASH_ENV" ]]; then source "$BASH_ENV"; else source $HOME/.bashrc; fi
            singularity --version

  install_debian_3:
    description: |
      Install Singularity 3.* on a debian base. We must first install GoLang.
      This is slower than using a pre-built container base, but gives us a native
      install with more functionality.
    executor: machine
    parameters:
      singularity-version:
        type: string
        default: "3.2.1"
      go-version:
        type: string
        default: "1.11.5"
    steps:
      - install-go:
          go-version: <<parameters.go-version>>
      - debian-install-3:
          singularity-version: <<parameters.singularity-version>>
      - run:
          name: Check install version
          command: |
            if [[ -f "$BASH_ENV" ]]; then source "$BASH_ENV"; else source $HOME/.bashrc; fi
            singularity --version

  docker_cli:
    description: |
       Interact with Singularity via a Docker container. The containers are
       prebuilt, so this step supports any of the tags belonging to the
       singularityware/singularity Docker repository.
    executor: docker
    parameters:
      singularity-version:
        description: The Singularity version (tag on Docker Hub singularityware/singularity)
        type: string
        default: v3.2.1-slim
    steps:
      - run:
          name: Check Singularity Version
          singularity-version: <<parameters.singularity-version>>
          command: singularity --version

  build_container_docker_base:
    description: |
        Build a Singularity Container using a a pre-build Docker base. This is
        the fastest build option because the container is prebuilt, but functionality
        (interaction with the container) after is limited for the same reason.
        This job supports any version of Singularity, and the version maps
        to the tag of singularityware/singularity on Docker Hub.
    executor: docker
    parameters:
      from-uri:
        description: The Singularity recipe path or docker:// uri to build from.
        type: string
        default: Singularity
      image:
        description: The image binary to build (e.g., container.sif)
        type: string
        default: container.sif
    steps:
      - build-image-docker:
          from-uri: <<parameters.from-uri>>
          image: <<parameters.image>>


  build_container_docker_custom_3:
    description: |
        Build a Singularity Container using an alpine Docker base, and install
        a custom version of GoLang and Singularity in the 3.* family.
    executor: alpine-docker
    parameters:
      from-uri:
        description: The Singularity recipe path or docker:// uri to build from.
        type: string
        default: Singularity
      image:
        description: The image binary to build (e.g., container.sif)
        type: string
        default: container.sif
      go-version:
        type: string
        default: "1.11.5"
      singularity-version:
        description: The Singularity version
        type: string
        default: 3.2.1
    steps:
      - install-go:
          go-version: <<parameters.go-version>>
      - alpine-install-3:
          singularity-version: <<parameters.singularity-version>>
      - build-image:
          from-uri: <<parameters.from-uri>>
          image: <<parameters.image>>

  build_container_custom_2:
    description: |
        Build a Singularity 2.* Container on a debian (machine) base. This means
        that we install Singularity from source
    executor: machine
    parameters:
      from-uri:
        description: The Singularity recipe path or docker:// uri to build from.
        type: string
        default: Singularity
      image:
        description: The image binary to build (e.g., container.sif)
        type: string
        default: container.sif
      singularity-version:
        type: string
        default: "2.6.1"
    steps:
      - debian-install-2:
          singularity-version: <<parameters.singularity-version>>
      - build-image:
          from-uri: <<parameters.from-uri>>
          image: <<parameters.image>>

  build_container_custom_3:
    description: |
      Build a Singularity Container version 3.* base on a debian base. This
      option will give you the most freedom to use the container after building.
    executor: machine
    parameters:
      from-uri:
        description: The Singularity recipe path or docker:// uri to build from.
        type: string
        default: Singularity
      image:
        description: The image binary to build (e.g., container.sif)
        type: string
        default: container.sif
      go-version:
        type: string
        default: "1.11.5"
      singularity-version:
        type: string
        default: "3.2.1"
    steps:
      - install-go:
          go-version: <<parameters.go-version>>
      - debian-install-3:
          singularity-version: <<parameters.singularity-version>>
      - build-image:
          from-uri: <<parameters.from-uri>>
          image: <<parameters.image>>
